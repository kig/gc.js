GC.js
-----

Garbage Collector implementations in JavaScript for fun~


Current status
--------------

- mark_sweep.js: Version 0.0.2
  A weird mark-and-sweep collector with an O(1) allocator.
  Perhaps more accurately a mark-and-weep collector.
  Allocates to a flat slab of memory, compacts when less than half full.
  Allocates using an incrementing heap pointer.
  Tags pointers by setting the MSB.
  Each allocation has a {start, length, marked}-struct as overhead.

  Mark: unmarks all allocs, goes through a root set of allocs,
        marks and follows found pointers breadth-first (...)
  Sweep: goes through the array of allocs, deletes unmarked allocs.

  Usage:
    var ms = new MarkSweep();
    var allocs = [];
    for (var i=0; i<10; i++) {
        allocs.push(ms.allocate(40)); // allocate 40 words
    }
    // refer to allocs[7] from allocs[0]
    ms.setPtr(allocs[0].start, allocs[7].start);
    // write 12345 to word 4 of allocs[7]
    ms.setWord(allocs[7].start+4, 12345);
    // GC with the first half of objects as roots
    ms.gc(allocs.slice(0,5));
    ms.allocationCount == 6; // 0..4 and 7
    ms.heapUsage == 40 * 6;
    ms.heapSize >= ms.heapUsage;
    // get word 4 of allocs[7]
    ms.getWord(allocs[7].start+4);
